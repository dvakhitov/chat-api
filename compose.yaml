services:
  # Nginx as load balancer
  nginx:
    image: nginx:1.27.3-alpine
    env_file:
      - .env
    environment:
      - DOMAIN_NAME=${DOMAIN:-localhost}
    # container_name: nginx  # Убрали, чтобы не мешать масштабированию
    depends_on:
      - app
    ports:
      - "${NGINX_PORT:-80}:80"  # Можно оставить дефолт 80, если NGINX_PORT не задан
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./symfony:/var/www/symfony  
    networks:
      - symfony_net

    healthcheck:
      test: [ "CMD", "curl", "-f", "http://${DOMAIN}/health" ]
      interval: 30s
      timeout: 5s
      retries: 3

  app:
    build:
      context: ./symfony
      dockerfile: Dockerfile
    working_dir: /var/www/symfony
    volumes:
      - ./symfony:/var/www/symfony
      - ./symfony/docker/php/php-fpm.conf:/usr/local/etc/php-fpm.d/www.conf:ro
    expose:
      - "9000"  # Важно для PHP-FPM
    env_file:
      - .env
      - symfony/.env.local
    environment:
      APP_ENV: "${APP_ENV:-prod}"
      DATABASE_URL: "postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:5432/${DB_NAME}"
      APP_SECRET: "${APP_SECRET}"
      MESSENGER_TRANSPORT_DSN: "${MESSENGER_TRANSPORT_DSN}"
      APP_DEBUG: "${APP_DEBUG:-true}"
      RABBITMQ_USER: "${RABBITMQ_USER}"
      RABBITMQ_PASSWORD: "${RABBITMQ_PASSWORD}"
      RABBITMQ_HOST: "${RABBITMQ_HOST}"
      RABBITMQ_PORT: "${RABBITMQ_PORT}"
      RABBITMQ_VHOST: "${RABBITMQ_VHOST}"
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    networks:
      - symfony_net
    healthcheck:
      test: ["CMD-SHELL", "php-fpm -t || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
    depends_on:
      rabbitmq:
        condition: service_healthy
    
  # Primary PostgreSQL database
  db-primary:
    image: postgres:17.2
    # container_name: db_primary
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      # Вместо POSTGRES_PASSWORD используем POSTGRES_PASSWORD_FILE, чтобы читать из секрет-файла
#      POSTGRES_PASSWORD_FILE: "/run/secrets/db_password"
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}

    volumes:
      - db_primary_data:/var/lib/postgresql/data
    networks:
      - symfony_net
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "0.50"
          memory: 512M
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${DB_USER}" ]
      interval: 30s
      timeout: 5s
      retries: 5

  # Replica PostgreSQL database
  db-replica:
    image: postgres:17.2
    # container_name: db_replica
    depends_on:
      - db-primary
    command: >
      postgres -c 'wal_level=logical' -c 'hot_standby=on'
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
#      POSTGRES_PASSWORD_FILE: "/run/secrets/db_password"
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - db_replica_data:/var/lib/postgresql/data
    networks:
      - symfony_net
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "0.50"
          memory: 512M
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${DB_USER}" ]
      interval: 30s
      timeout: 5s
      retries: 5

  # Redis for caching
  redis:
    image: redis:7.4
    # container_name: redis
    # Оставим порты, если нужно подключаться извне для теста:
    env_file:
      - .env
    ports:
      - "6378:6379"
    command: [ "redis-server", "--save", "60", "1", "--loglevel", "warning" ]
    volumes:
      - redis-data:/data
    networks:
      - symfony_net
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "0.25"
          memory: 256M
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 5s
      retries: 3

  rabbitmq:
    image: rabbitmq:3.12-management
    env_file:
      - .env
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    ports:
      - "5672:5672"   # AMQP protocol port
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - symfony_net

  # WebSocket Server
  websocket:
    build:
      context: ./websocket
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - WS_PORT=6001
      - SYMFONY_SERVER=http://nginx:80
      - RABBITMQ_USER=user
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_VHOST=/
    ports:
      - "6001:6001"
    networks:
      - symfony_net
    depends_on:
      nginx:
        condition: service_started
      app:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "0.50"
          memory: 512M
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://${DOMAIN}:6001/health"]
      interval: 30s
      timeout: 5s
      retries: 3

networks:
  symfony_net:
    # В Swarm будет overlay, в обычном Compose – bridge
    driver: bridge

volumes:
  db_primary_data:
  db_replica_data:
  redis-data:
  rabbitmq_data:

  app_secret:
    external: true
